plot(dose, drugB, type = 'b', pch = 23, lty = 6, col = 'blue', bg = 'green')
par(opar)
title(main="My Title", col.main="red",      sub="My Sub-title", col.sub="blue",      xlab="My X label", ylab="My Y label",      col.lab="green", cex.lab=0.75)
title(main="My Title", col.main="red", sub="My Sub-title", col.sub="blue", xlab="My X label", ylab="My Y label", col.lab="green", cex.lab=0.75)
plot(dose, drugB, type = 'b', pch = 23, lty = 6, col = 'blue', bg = 'green')
title(main="My Title", col.main="red", sub="My Sub-title", col.sub="blue", xlab="My X label", ylab="My Y label", col.lab="green", cex.lab=0.75)
clean()
clear()
x <- c(1: 10)
y <- x
z <- 10/x
opar <- par(no.readonly = TRUE)
par(mar = c(5, 4, 4, 8) + 0.1)
plot(x, y, type = 'b', pch = 21, col = 'red', yaxt = 'n', lty = 3, ann = FALSE)
plot(x, y, type = 'b', pch = 21, col = 'red', yaxt = 'n', lty = 3, ann = FALSE)
plot(x, y, type = 'b', pch = 21, col = 'red', yaxt = 'n', lty = 3, ann = FALSE)
par(mar = c(5, 4, 4, 2) + 0.1)
plot(x, y, type = 'b', pch = 21, col = 'red', yaxt = 'n', lty = 3, ann = FALSE)
par(mar = c(5, 4, 4, 8) + 0.1)
plot(x, y, type = 'b', pch = 21, col = 'red', yaxt = 'n', lty = 3, ann = FALSE)
plot(x, y, type = 'b', pch = 21, col = 'red', yaxt = 'n', lty = 3, ann = FALSE)
lines(x, z, type = 'b', pch = 22, col = 'blue', las = 2)
axis(2, at = x, labels = x, col.axis = 'red', las = 2)
axis(2, at = x, labels = x, col.axis = 'red', las = 1)
axis(2, at = x, labels = x, col.axis = 'red', las = 0)
axis(2, at = x, labels = x, col.axis = 'red', las = 2)
axis(4, at = z, labels = round(z, digits = 2), col.axis = 'blue', las = 2, cex.axis = 0.7, tck = -.01)
mtext("y = 1 / x", side = 4, line = 3, cex.lab = 1, las = 2, col = "blue")
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
opar <- par(no.readonly = TRUE)
par(lwd = 2, cex = 1.5, font.lab = 2)
plot(dose, drugA, type = 'b', pch = 15, lty = 1, col = 'red', ylim = c(0, 60), main = "Drug A vs. Drug B.", xlab = "Drug Dosage", ylab = "Drug Response")
lines(dose, drugB, type = 'b', pch = 17, lty = 2, col = 'blue')
abline(h = c(30), lwd = 1.5, lty = 2, col = 'gray')
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
minor.tick(nx = 3, ny = 3, tick.ratio = 0.5)
legend("topleft", inset = .05, title = "Drug Type", c("A", "B"), lty = c(1, 2), pch = c(15, 17), col = c('red', 'blue'))
par(opar)
with(mtcars, {
plot(wt, mpg,
main = "Mileage vs. Car Weight",
xlab = "Weight", ylab = "Mileage",
pch = 18, col = 'blue')
text (wt, mpg,
row.names(mtcars),
cex = 0.6, pos = 4, col = 'red')
})
opar <- par(no.readonly = TRUE)
par(cex = 1.5)
plot(1: 7, 1: 7, type = 'n')
text(3, 3, "Example of default text")
text(4, 4, family = 'mono', "Example of mono-spaced text")
text(5, 5, family = 'serif', "Example of serif text")
par(opar)
demo(maath)
damo(plotmath)
help(plotmath)
with(mtcars, {
opar <- par(no.readonly = TRUE)
plot(wt, mpg, main = "Scatterplot of wt vs. mpg")
plot(wt, disp, main = "Scatterplot of wt vs. disp")
hist(wt, main = "Histogram of wt")
boxplot(wt, main = "Boxplot of wt")
par(opar)
})
with(mtcars, {
opar <- par(no.readonly = TRUE)
plot(wt, mpg, main = "Scatterplot of wt vs. mpg")
plot(wt, disp, main = "Scatterplot of wt vs. disp")
hist(wt, main = "Histogram of wt")
boxplot(wt, main = "Boxplot of wt")
par(opar)
})
with(mtcars, {
opar <- par(no.readonly = TRUE)
plot(wt, mpg, main = "Scatterplot of wt vs. mpg")
plot(wt, disp, main = "Scatterplot of wt vs. disp")
hist(wt, main = "Histogram of wt")
boxplot(wt, main = "Boxplot of wt")
par(opar)
})
with(mtcars, {
opar <- par(no.readonly = TRUE)
par(mfrow = c(2, 2))
plot(wt, mpg, main = "Scatterplot of wt vs. mpg")
plot(wt, disp, main = "Scatterplot of wt vs. disp")
hist(wt, main = "Histogram of wt")
boxplot(wt, main = "Boxplot of wt")
par(opar)
})
help(with)
x1 <- c(2, 2, 6, 4)
x2 <- c(3, 4, 2, 8)
mydata <- data.frame(x1, x2)
mydata$x1
with(mydata, {
mydata$SumX <- x1 + x2
mydata$MeanX <- (x1 + x2) / 2
})
mydata
with(mydata, {
mydata$SumX <- x1 + x2
mydata$MeanX <- (x1 + x2) / 2
})
with(mydata, {
mydata$SumX <<- x1 + x2
mydata$MeanX <<- (x1 + x2) / 2
})
mydata
with(mydata, {
plot(x1, x2)
})
?(cut)
help(cut)
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates
Sys.Date()
date()
help(as.date)
help(as.Date)
x <- c("1jan1960")
z <- as.Date(x, "%d%b%Y")
z
help
help(%in%)
%in%
help(subset)
1 : 4
1: 4
help(mean)
help(cat)
rep(1, 10)
Diabets <- c('Type1', 'Type2')
factor(Diabets)
install.packages(ISLR)
install.packages(MASS)
install.packages(ISLR)
install.packages(ISLR)
install.packages('ISLR')
par(mfrow = c(2, 2))
slices <- c(10, 12, 4, 16, 8)
lbls <- c('US', 'UK', 'Australia', 'Germany', 'France')
pie(slices, labels = lbls, main = "Simple Pie Chart")
pct <- round(slices / sum(slices) * 100)
lbls2 <- paste(lbls, ' ', pct, "%", sep = '')
lbls2
pie(slices, labels = lbls2, col = rainbow(length(lbls2)), main = "Pie Chart with Percentage")
library(plotrix)
pie3D(slices, labels = lbls, explode = 0.1, main = "3D Pie Chart")
mytable <- table(state.region)
mytable
lbls3 <- paste(names(mytable), '\n', mytable, sep = '')
pie(mytable, labels = lbls3, main = "Pie Chart from a Table\n (with sample sizes")
help(hist)
par(mfrow = c(2, 2))
hist{(mtcars$mpg)}
hist(mtcars$mpg)
hist(mtcars$mpg, breaks = 12, col = 'red')
hist(mtcars$mpg, breaks = 12, col = 'red')
rug(jitter(mtcars$mpg))
lines(density(mtcars$mpg), col = 'blue', lwd = 2)
x <- mtcars$mpg
h <- hist(x, breaks = 12, col = 'red')
xfit <- seq(min(x), max(x), length = 40)
yfit <- dnorm(xfit, mean = mean(x), sd = sd(x))
yfit <- yfit * diff(h$mids[1: 2]) * length(x)
lines(xfit, yfit, col = 'blue', lwd = 2)
box()
h&minds
h$mids
help(diff)
d <- density(mtcars$mpg)
polygon(d, col = 'red', border = 'blue')
plot(d)
polygon(d, col = 'red', border = 'blue')
help(polygon)
install('sm')
install.packages('sm')
par()
par(mfrow = c(1, 1))
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4, 6, 8), labels = c('4 cylinder', '6 cylinder', '8 cylinder'))
sm.density.compare(mpg, cyl)
sm.density.compare(mpg, cyl.f)
cyl
sm.density.compare(mpg, cyl.f)
cyl
sm.density.compare(mpg, cyl)
par(mfrow = c(1, 1))
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels = c(4, 6, 8), labels = c('4 cylinder', '6 cylinder', '8 cylinder'))
sm.density.compare(mpg, cyl)
colfill <- c(2: (1 + length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill = colfill)
cyl.f
box(mpg ~ cyl, data = mtcars, notch = TRUE, varwidth = TRUE)
boxplot(mpg ~ cyl, data = mtcars, notch = TRUE, varwidth = TRUE)
install.packages('vioplot')
library(vioplot)
within(mtcars,{
x1 <- mpg[cyl == 4]
x2 <- mpg[cyl == 6]
x3 <- mpg[cyl == 8]
})
with(mtcars,{
x1 <<- mpg[cyl == 4]
x2 <<- mpg[cyl == 6]
x3 <<- mpg[cyl == 8]
})
within(mtcars,{
x1 <- mpg[cyl == 4]
x2 <- mpg[cyl == 6]
x3 <- mpg[cyl == 8]
})
vioplot(x1, x2, x3)
library(Hmisc)
myvars <- c('mpg', 'hp', 'wt')
describe(mtcars[myvars])
install.packages('pastecs')
library(pastecs)
myvar <- c('mpg', 'hp', 'wt')
stat.desc(mtcars[myvar])
install.packages('psych')
install.packages('doBy')
library(vcd)
install.packages('vcd')
install.packages("vcd")
library(vcd)
head(Arthritis)
install.packages('gmodels')
help(addmargins)
t_value <- 2.142884
2 * pt(t_value, 43)
2 * (1 - pt(t_value, 43))
qt(0.975, 43)
t_value <- 2.1429
pt(t_value, 43)
y <- c(40, 41, 43, 42, 44, 42, 43, 42)
x <- c(0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0)
m1 <- lm(y ~ x)
summary(m1)
anova(m1)
x_bar <- mean(x)
x_bar
ssx <- sum((x - x_bar) ** 2)
ssx
1.2877 / 10.5
sqrt(0.122638)
0.8842 * 0.8842
10.5 * 10.5
1.2877 * (1 / 8 + 110.25 / 10.5)
2.25 ** 2
1.2877 * (1 / 8 + 5.0625 / 10.5)
x <- c(0.3, 1.4, 1.0, -0.3, -0.2, 1.0, 2.0, -1.0, -0.7, 0.7)
y <- c(0.4, 0.9, 0.4, -0.3, 0.3, 0.8, 0.7, -0.4, -0.2, 0.7)
m1 <- lm(y ~ x)
summary(m1)
setwd("~/Coding/R")
census.data <- read.table("census.csv", header = T)
head(census.data)
census.data <- read.csv("census.csv", header = T)
head(census.data)
census.sample <- census.data[is.na(census.data) == FALSE]
head(census.sample)
census.sample <- census.data[is.na(census.data$outcome) == FALSE,]
head(census.sample)
census.prediction <- census.data[is.na(census.data$outcome) == TRUE,]
head(census.prediction)
census.data <- read.csv("census.csv", header = T)
with(census.data, {
educ <<- factor(educ)
status <<- factor(status)
race <<- factor(race)
gender <<- factor(gender)
})
census.sample <- census.data[is.na(census.data$outcome) == FALSE,]
census.prediction <- census.data[is.na(census.data$outcome) == TRUE,]
head(census.sample)
character(census.data$educ)
character(census.data$age)
help(character)
is.factor(census.data$educ)
logistic.fit = glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
summary(logistic.fit)
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
summary(logistic.fit)
library(ISLR)
set.seed(1)
library(boot)
cv.err <- cv.glm(census.sample, logistic.fit)
dim(census.sample)
library(MASS)
help(qda)
qda.fit <- qda(outcome ~ age + educ + status + race + gender + hrs, data = census.sample)
summary(qda.fit)
predict(qda, newdata = data.frame(age = 10, educ = 'Bachelor', Status = 'Divorced', race = 'white', gender = 'Female'))
head(census.sample)
predict(qda, newdata = census.sample[1, 1 - 7], gender = 'Female'))
predict(qda, newdata = census.sample[1, c(1-7)], gender = 'Female'))
predict(qda, newdata = census.sample[1, c(1, 2, 3, 4, 5, 6)], gender = 'Female'))
predict(qda, newdata = census.sample[1, c(1, 2, 3, 4, 5, 6)])
predict(qda, newdata = census.sample[1, 1 : 6])
predict(qda, census.sample[1, 1 : 6])
predict(qda, census.sample[, 1:6])
predict(qda.fit, census.sample[, 1:6])
predict(qda.fit, census.sample[1, 1:6])
predict(qda.fit, census.sample[1:2, 1:6])
qda.class <- predict(qda.fit, census.sample[, 1:6])$class
table(qda.class, census.sample[, 7])
mean(qda.calss == census.sample[, 7])
mean(qda.class == census.sample[, 7])
logistic.fit <- predict(logistic.fit, census.sample[, 1:6])$class
predict(logistic.fit, census.sample[, 1:6])
predict(logistic.fit, census.sample[1, 1:6])
predict(logistic.fit, census.sample[1:2, 1:6])
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
predict(logistic.fit, census.sample[1:2, 1:6])
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = "binomial")
predict(logistic.fit, census.sample[1:2, 1:6])
predict(logistic.fit, census.sample[1:10, 1:6])
predict(logistic.fit, census.sample[1:10, 1:6], type = 'response')
logistic.value <- predict(logistic.fit, census.sample[, 1:6], type = 'response')
mean(logistic.value)
logistic.value[logistic.value >= .5] = 1
logistic.value[logistic.value < .5] = 0
table(logistic.value, census.sample[, 7])
mean(logistic.value == census.sample[, 7])
step(logistic.fit, direction = "both")
step(logistic.fit, direction = "backward")
logistic.value <- predict(logistic.fit, census.prediction[, 1:6])
head(logistic.value)
logistic.value <- predict(logistic.fit, census.prediction[, 1:6], type = "response")
head(logistic.value)
logistic.value[logistic.value > .5] <- 1
logistic.value[logistic.value < .5] <- 0
head(logistic.value)
dim(logistic.value)
census.prediction$outcome <- logistic.value
output.data <- rbind(census.sample[, 7: 8], census.prediction[, 7: 8])
head(output.data)
output.data <- output.data[, c('id', 'outcome')]
head(output.data)
output.data <- output.data[order(output.data$id),]
head(output.data)
View(output.data)
predict(qda.fit, census.prediction[,1: 6])$class
predict(qda.fit, census.prediction[1,1: 6])$class
head(census.prediction)
predict(qda.fit, census.prediction[2,1: 6])$class
predict(qda.fit, census.prediction[3,1: 6])$class
predict(qda.fit, census.prediction[1:6,1: 6])$class
write.table(output.data, "hw5.txt")
write.table(output.data, "hw5.txt", sep = '\t')
View(output.data)
write.table(output.data, "hw5.txt", sep = '\t')
help(write.table)
dim(output.data)
write.table(output.data, "hw5.txt", sep = '\t')
write.table(output.data, "hw5.txt", col.names = c("id", "outcome"), row.names = output.data[,1] sep = '\t')
write.table(output.data, "hw5.txt", col.names = c("id", "outcome"), row.names = output.data[,1], sep = '\t')
write.table(output.data, "hw5.csv")
write.table(output.data, "hw5.csv", sep = '\t')
View(output.data)
write.csv(output.data, "hw5.csv")
input.data <- read.table("hw5.txt", header = T)
head(input.data)
View(census.data)
View(census.prediction)
census.data <- read.csv("census.csv", header = T)
with(census.data, {
educ <<- factor(educ)
status <<- factor(status)
race <<- factor(race)
gender <<- factor(gender)
})
census.sample <- census.data[is.na(census.data$outcome) == FALSE,]
census.prediction <- census.data[is.na(census.data$outcome) == TRUE,]
logistic.fit <- glm(outcome ~ age + educ + status + race + gender + hrs, data = census.sample, family = binomial)
logistic.value <- predict(logistic.fit, census.prediction[, 1:6], type = 'response')
logistic.value[logistic.value > .5] <- 1
logistic.value[logistic.value < .5] <- 0
output.data <- cbind(logistic.value, census.prediction[,8])
View(output.data)
write.table(logistc.value, 'output.txt', sep = '\t')
write.table(logistic.value, 'output.txt', sep = '\t')
write.table(logistic.value, 'output.txt', sep = '\t', colname = c('id', 'outcome'))
write.table(output.data, 'output.txt', sep = '\t')
output <- output[,c(2,1)]
output.data <- output.data[,c(2,1)]
write.table(output.data, 'output.txt', sep = '\t')
dim(output.data)
names(output.data) <- c('id', 'outcome')
write.table(output.data, 'output.txt', sep = '\t')
write.table(output.data, 'output.txt', sep = '\t')
library(FSelector)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
updateR()
??updateR
library(installr)
install.packages('dplyr')
help(dplyr)
install.packages('knitr')
vignette('datatable-intro')
install.packages(plotly)
install.packages('plotly')
??boxcox
??dpyr
help(pt)
sqrt(0.006)
sqrt(0.006) * 1.96
1.32 + 0.152
1.32 - 0.152
-0.634 -0.152
-0.634 + 0.152
setwd("~/Courses/Statistical-Machine-Learning/HW4")
H <- matrix(readBin('histograms.bin', 'double', 640000), 40000, 16)
H <- H + 0.01
# Multinomial EM algorithm
MultinomialEM <- function(H, K, tau) {
n = dim(H)[1]
d = dim(H)[2]
iteration = 1
# Initialize the weights
c = rep(1, K) / K
# Initialize the centroids
indices = sample(1: n, K)
t = H[indices,]
# Iteration
change = 1
while (change > tau){
# E-Step
log_t = log(t)
Phi = exp(H %*% t(log_t))
A = matrix(rep(1/rowSums(Phi * c), K), n, K) * (Phi * c)
# M-Step
t_old = t
c = colSums(A)
c = c / sum(c)
b = t(A) %*% H
t = matrix(rep(1/apply(b, 1, sum), d), K, d) * b
# Compute changes
iteration = iteration + 1
change = norm(theta_old - theta, type = 'O')
}
return(I = apply(A, 1, which.max))
}
# Plot the image
imgplot <- function(M_vector){
img_matrix <- matrix(M_vector, nrow = 200, byrow = T)
plot_matrix <- NULL
for (i in 0:(dim(img_matrix)[1] - 1)){
plot_matrix <- cbind(plot_matrix, img_matrix[dim(img_matrix)[1] - i,])
}
image(x = 1:200, y = 1:200, plot_matrix, axes= FALSE, col = grey((0:256) / 256), xlab = '', ylab = '')
}
bins_cluster <- MultinomialEM(H, 3, 0.01)
H <- matrix(readBin('histograms.bin', 'double', 640000), 40000, 16)
H <- H + 0.01
# Multinomial EM algorithm
MultinomialEM <- function(H, K, tau) {
n = dim(H)[1]
d = dim(H)[2]
iteration = 1
# Initialize the weights
c = rep(1, K) / K
# Initialize the centroids
indices = sample(1: n, K)
t = H[indices,]
# Iteration
change = 1
while (change > tau){
# E-Step
log_t = log(t)
Phi = exp(H %*% t(log_t))
A = matrix(rep(1/rowSums(Phi * c), K), n, K) * (Phi * c)
# M-Step
t_old = t
c = colSums(A)
c = c / sum(c)
b = t(A) %*% H
t = matrix(rep(1/apply(b, 1, sum), d), K, d) * b
# Compute changes
iteration = iteration + 1
change = norm(t_old - t, type = 'O')
}
return(I = apply(A, 1, which.max))
}
# Plot the image
imgplot <- function(M_vector){
img_matrix <- matrix(M_vector, nrow = 200, byrow = T)
plot_matrix <- NULL
for (i in 0:(dim(img_matrix)[1] - 1)){
plot_matrix <- cbind(plot_matrix, img_matrix[dim(img_matrix)[1] - i,])
}
image(x = 1:200, y = 1:200, plot_matrix, axes= FALSE, col = grey((0:256) / 256), xlab = '', ylab = '')
}
bins_cluster <- MultinomialEM(H, 3, 0.01)
imgplot(bins_cluster)
bins_cluster
bins_cluster <- MultinomialEM(H, 4, 0.01)
imgplot(bins_cluster)
bins_cluster <- MultinomialEM(H, 5, 0.01)
imgplot(bins_cluster)
